%%
headers
#include <Python.h>
#include <pygobject.h>
#include "empathy-avatar.h"
#include "empathy-chandler.h"
#include "empathy-chatroom-manager.h"
#include "empathy-chatroom.h"
#include "empathy-conf.h"
#include "empathy-contact-list.h"
#include "empathy-contact-manager.h"
#include "empathy-contact.h"
#include "empathy-debug.h"
#include "empathy-filter.h"
#include "empathy-idle.h"
#include "empathy-log-manager.h"
#include "empathy-message.h"
#include "empathy-presence.h"
#include "empathy-time.h"
#include "empathy-tp-chat.h"
#include "empathy-tp-chatroom.h"
#include "empathy-tp-contact-factory.h"
#include "empathy-tp-contact-list.h"
#include "empathy-tp-group.h"
#include "empathy-tp-roomlist.h"
#include "empathy-utils.h"
#include "empathy-contact-factory.h"
#include "empathy-enum-types.h"

void empathy_add_constants(PyObject *module, const gchar *strip_prefix);
void empathy_register_classes(PyObject *d);

%%
modulename empathy
%%
ignore-glob
	*_get_type
%%
import gobject.GObject as PyGObject_Type
%%
override empathy_contact_list_get_members kwargs
static PyObject *
_wrap_empathy_contact_list_get_members(PyGObject *self, PyObject *args, PyObject *kwargs)
{

	PyObject *py_contacts = PyList_New(0);
	GList *l, *contacts;

	contacts = empathy_contact_list_get_members(EMPATHY_CONTACT_LIST(self->obj));

	for (l = contacts; l; l = l->next) {
		EmpathyContact *contact;
		contact = l->data;
		PyList_Append(py_contacts, pygobject_new((GObject *) contact));
	}

	return py_contacts;

}
%%
